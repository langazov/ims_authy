# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Image configuration
image:
  registry: docker.io
  repository: ims_authy-backend
  tag: "latest"
  pullPolicy: IfNotPresent
  pullSecrets: []

# Replica configuration
replicaCount: 1
frontendReplicaCount: 1

# Frontend image configuration
frontend:
  image:
    registry: docker.io
    repository: ims_authy-frontend
    tag: "latest"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 80
    targetPort: 80
    annotations: {}
  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: authy.imsc.eu
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: oauth2-tls
        hosts:
          - authy.imsc.eu

# Service account
serviceAccount:
  create: false
  annotations: {}
  name: ""

# Pod security context
podSecurityContext:
  fsGroup: 2000

# Security context
securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

# Service configuration
service:
  type: ClusterIP
  port: 8080
  targetPort: 8080
  annotations: {}

# Ingress configuration
ingress:
  enabled: false
  className: ""
  annotations: 
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
  hosts:
    - host: oauth2.imsc.eu
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: oauth2-tls
      hosts:
        - oauth2.imsc.eu


# Resource limits
resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 128Mi

# Autoscaling
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Liveness and readiness probes
livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

# Application configuration
config:
  # Server configuration
  port: 8080
  jwtSecret: "your-super-secret-jwt-key-change-this-in-production"
  
  # Database configuration
  database:
    name: oauth2_server
    host: "ims-authy-mongodb"
    port: 27017
    username: oauth2user
    password: oauth2pass
    
  # OAuth2 client configuration
  oauth2:
    clientId: "frontend-client"
    clientSecret: "oauth2-secret"
    redirectUrl: "https://authy.imsc.eu/callback"
    authServerUrl: "https://oauth2.imsc.eu/oauth/authorize"
    tokenServerUrl: "https://oauth2.imsc.eu/oauth/token"

  # Social login providers (optional)
  socialLogin:
    google:
      clientId: ""
      clientSecret: ""
      redirectUrl: "https://oauth2.imsc.eu/auth/google/callback"
    
    github:
      clientId: ""
      clientSecret: ""
      redirectUrl: "https://oauth2.imsc.eu/auth/github/callback"
      
    facebook:
      clientId: ""
      clientSecret: ""
      redirectUrl: "https://oauth2.imsc.eu/auth/facebook/callback"
      
    apple:
      clientId: ""
      clientSecret: ""
      redirectUrl: "https://oauth2.imsc.eu/auth/apple/callback"

# Secrets configuration
secrets:
  # Existing secret name for JWT and OAuth secrets
  existingSecret: ""
  # Keys in the existing secret
  jwtSecretKey: "jwt-secret"
  clientSecretKey: "client-secret"
  
  # Social login secrets
  socialSecrets:
    existingSecret: ""
    googleClientSecretKey: "google-client-secret"
    githubClientSecretKey: "github-client-secret"
    facebookClientSecretKey: "facebook-client-secret"
    appleClientSecretKey: "apple-client-secret"

# MongoDB configuration
mongodb:
  enabled: true
  # Install MongoDB in the same namespace as the application
  namespaceOverride: ""
  fullnameOverride: "ims-authy-mongodb"
  
  auth:
    enabled: true
    rootUsername: admin
    rootPassword: password123
    usernames:
      - oauth2user
    passwords:
      - oauth2pass
    databases:
      - oauth2_server
  
  persistence:
    enabled: true
    size: 10Gi
    storageClass: ""
  
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  
  # Service account configuration for MongoDB
  serviceAccount:
    create: true
    name: "ims-authy-mongodb"
    annotations: {}
  
  # Network configuration
  service:
    type: ClusterIP
    port: 27017
    
  # Security context
  podSecurityContext:
    enabled: true
    fsGroup: 1001
    
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true

# External MongoDB configuration (if mongodb.enabled = false)
externalMongodb:
  host: localhost
  port: 27017
  database: oauth2_server
  auth:
    enabled: true
    username: admin
    password: password123
    authSource: admin
  # Existing secret for MongoDB credentials
  existingSecret: ""
  usernameKey: "username"
  passwordKey: "password"

# Persistent Volume configuration
persistence:
  enabled: true
  accessMode: ReadWriteOnce
  size: 1Gi
  storageClass: ""
  
# Pod disruption budget
podDisruptionBudget:
  enabled: false
  minAvailable: 1
  # maxUnavailable: 1

# Network policies
networkPolicy:
  enabled: false
  ingress: []
  egress: []

# Service monitor for Prometheus
serviceMonitor:
  enabled: false
  labels: {}
  interval: 30s
  scrapeTimeout: 10s
  path: /metrics