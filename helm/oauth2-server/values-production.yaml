# Production values for oauth2-server
# This file contains production-ready configurations

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

replicaCount: 3
frontendReplicaCount: 2

# Production images (update with your registry)
image:
  registry: docker.io
  repository: langazov/ims_authy-backend
  tag: "${IMAGE_TAG}"
  pullPolicy: IfNotPresent
  pullSecrets: []

frontend:
  image:
    registry: docker.io
    repository: langazov/ims_authy-frontend
    tag: "${IMAGE_TAG}"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 3000
    targetPort: 3000
    annotations: {}
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-production
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
    hosts:
      - host: ${FRONTEND_HOST}
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: oauth2-frontend-tls
        hosts:
          - ${FRONTEND_HOST}

# Ingress configuration with TLS
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/cors-allow-headers: DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization
    nginx.ingress.kubernetes.io/cors-allow-methods: POST, GET, OPTIONS
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-expose-headers: X-Custom-Header
    nginx.ingress.kubernetes.io/cors-max-age: "86400"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    cert-manager.io/cluster-issuer: letsencrypt-production
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    acme.cert-manager.io/http01-edit-in-place: "true"
  # Backend (oauth2 server) ingress - keep this ingress bound to the backend host only
  hosts:
    - host: ${BACKEND_HOST}
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: oauth2-server-tls
      hosts:
        - ${BACKEND_HOST}

# Frontend ingress is configured under the top-level `frontend.ingress` key above.

# Service account
serviceAccount:
  create: false
  annotations: {}
  name: ""

# Service configuration
service:
  type: ClusterIP
  port: 8080
  targetPort: 8080
  annotations: {}


# Production resource configuration
resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 200m
    memory: 256Mi

# Enable autoscaling
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Liveness and readiness probes
livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

# Production application configuration
config:
  # Server configuration
  port: 8080
  jwtSecret: "Zrcnc0K2sDfVC2hu"
  # Force setup mode (set to "true" to force setup wizard)
  forceSetup: false
  
  # Database configuration
  database:
    name: oauth2_server
    host: "ims-authy-mongodb"
    port: 27017
    username: oauth2user
    password: UGsAoE7aZnVTgs9P
    
  # OAuth2 client configuration
  oauth2:
    clientId: "production-frontend-client"
    clientSecret: "production-oauth2-secret-change-this"
    redirectUrl: "https://${FRONTEND_HOST}/callback"
    authServerUrl: "https://${BACKEND_HOST}/oauth/authorize"
    tokenServerUrl: "https://${BACKEND_HOST}/oauth/token"

  # Configure social login providers (replace with your credentials)
  socialLogin:
    google:
      clientId: "your-google-client-id.apps.googleusercontent.com"
      clientSecret: "your-google-client-secret"
      redirectUrl: "https://${BACKEND_HOST}/auth/google/callback"
    
    github:
      clientId: "your-github-client-id"
      clientSecret: "your-github-client-secret"
      redirectUrl: "https://${BACKEND_HOST}/auth/github/callback"
    
    facebook:
      clientId: ""
      clientSecret: ""
      redirectUrl: "https://${BACKEND_HOST}/auth/facebook/callback"
      
    apple:
      clientId: ""
      clientSecret: ""
      redirectUrl: "https://${BACKEND_HOST}/auth/apple/callback"

# Secrets configuration
secrets:
  # Existing secret name for JWT and OAuth secrets
  existingSecret: ""
  # Keys in the existing secret
  jwtSecretKey: "jwt-secret"
  clientSecretKey: "client-secret"
  
  # Social login secrets
  socialSecrets:
    existingSecret: ""
    googleClientSecretKey: "google-client-secret"
    githubClientSecretKey: "github-client-secret"
    facebookClientSecretKey: "facebook-client-secret"
    appleClientSecretKey: "apple-client-secret"
# MongoDB production configuration
mongodb:
  enabled: true
  # Install MongoDB in the same namespace as the application
  namespaceOverride: ""
  # fullnameOverride: ""
  
  auth:
    enabled: true
    rootUsername: root
    rootPassword: "xMyEfnN4TJvHDU3p"
    usernames:
      - oauth2user
    passwords:
      - UGsAoE7aZnVTgs9P
    databases:
      - oauth2_server
  
  # persistence:
  #   enabled: true
  #   size: 10Gi
  #   storageClass: "longhorn"
  
  # resources:
  #   limits:
  #     cpu: 1000m
  #     memory: 2Gi
  #   requests:
  #     cpu: 200m
  #     memory: 512Mi
  
  # Service account configuration for MongoDB

  # Network configuration
  service:
    type: ClusterIP
    port: 27017
    
  # Security context
  podSecurityContext:
    enabled: true
    fsGroup: 1001
    
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true

# External MongoDB configuration (if mongodb.enabled = false)
externalMongodb:
  host: localhost
  port: 27017
  database: oauth2_server
  auth:
    enabled: true
    username: admin
    password: password123
    authSource: admin
  # Existing secret for MongoDB credentials
  existingSecret: ""
  usernameKey: "username"
  passwordKey: "password"

# Persistent Volume configuration
persistence:
  enabled: false
  accessMode: ReadWriteOnce
  size: 1Gi
  storageClass: "longhorn"

# Enable pod disruption budget for high availability
podDisruptionBudget:
  enabled: true
  minAvailable: 1
  # maxUnavailable: 1

# Network policies
networkPolicy:
  enabled: false
  ingress: []
  egress: []

# Enable monitoring
serviceMonitor:
  enabled: true
  labels:
    release: prometheus
  interval: 30s
  scrapeTimeout: 10s
  path: /metrics


