# Production values for oauth2-server
# This file contains production-ready configurations

replicaCount: 3
frontendReplicaCount: 2

# Production images (update with your registry)
image:
  registry: docker.io
  repository: ims_authy-backend
  tag: "${IMAGE_TAG}"
  pullPolicy: IfNotPresent

frontend:
  image:
    registry: docker.io
    repository: ims_authy-frontend
    tag: "${IMAGE_TAG}"
    pullPolicy: IfNotPresent
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
    hosts:
      - host: ${FRONTEND_HOST}
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: oauth2-frontend-tls
        hosts:
          - ${FRONTEND_HOST}

# Ingress configuration with TLS
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/cors-allow-headers: DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization
    nginx.ingress.kubernetes.io/cors-allow-methods: POST, GET, OPTIONS
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-expose-headers: X-Custom-Header
    nginx.ingress.kubernetes.io/cors-max-age: "86400"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    acme.cert-manager.io/http01-edit-in-place: "true"
  # Backend (oauth2 server) ingress - keep this ingress bound to the backend host only
  hosts:
    - host: ${BACKEND_HOST}
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: oauth2-server-tls
      hosts:
        - ${BACKEND_HOST}

# Frontend ingress is configured under the top-level `frontend.ingress` key above.


# Production resource configuration
resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 200m
    memory: 256Mi


# Enable autoscaling
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Production application configuration
config:
  jwtSecret: "production-jwt-secret-change-this-to-a-secure-value"
  oauth2:
    clientId: "production-frontend-client"
    clientSecret: "production-oauth2-secret-change-this"
    redirectUrl: "https://${FRONTEND_HOST}/callback"
    authServerUrl: "https://${BACKEND_HOST}/oauth/authorize"
    tokenServerUrl: "https://${BACKEND_HOST}/oauth/token"

  # Configure social login providers (replace with your credentials)
  socialLogin:
    google:
      clientId: "your-google-client-id.apps.googleusercontent.com"
      clientSecret: "your-google-client-secret"
      redirectUrl: "https://${BACKEND_HOST}/auth/google/callback"
    
    github:
      clientId: "your-github-client-id"
      clientSecret: "your-github-client-secret"
      redirectUrl: "https://${BACKEND_HOST}/auth/github/callback"

# MongoDB production configuration
mongodb:
  enabled: true
  auth:
    rootPassword: "secure-mongodb-password-change-this"
  persistence:
    enabled: true
    size: 50Gi
    storageClass: "fast-ssd"
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 200m
      memory: 512Mi

# Enable pod disruption budget for high availability
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Enable monitoring
serviceMonitor:
  enabled: true
  labels:
    release: prometheus

# Security configurations
securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

podSecurityContext:
  fsGroup: 2000
  runAsNonRoot: true
  runAsUser: 1000

# Node affinity for production workloads
# affinity:
#   podAntiAffinity:
#     preferredDuringSchedulingIgnoredDuringExecution:
#     - weight: 100
#       podAffinityTerm:
#         labelSelector:
#           matchExpressions:
#           - key: app.kubernetes.io/name
#             operator: In
#             values:
#             - oauth2-server
#         topologyKey: kubernetes.io/hostname

# Use production storage class
# persistence:
#   enabled: true
#   size: 5Gi
#   storageClass: "fast-ssd"

# Production tolerations (if needed)
tolerations:
  - key: "production"
    operator: "Equal"
    value: "true"
    effect: "NoSchedule"

# Node selector for production nodes
nodeSelector:
  environment: production